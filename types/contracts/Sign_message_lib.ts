/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface Sign_message_libInterface extends utils.Interface {
  functions: {
    "getMessageHash(bytes)": FunctionFragment;
    "signMessage(bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signMessage",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signMessage",
    data: BytesLike
  ): Result;

  events: {
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export type SignMsgEvent = TypedEvent<[string], { msgHash: string }>;

export type SignMsgEventFilter = TypedEventFilter<SignMsgEvent>;

export interface Sign_message_lib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Sign_message_libInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getMessageHash(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  signMessage(
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    signMessage(_data: BytesLike, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "SignMsg(bytes32)"(msgHash?: BytesLike | null): SignMsgEventFilter;
    SignMsg(msgHash?: BytesLike | null): SignMsgEventFilter;
  };

  estimateGas: {
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMessageHash(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    signMessage(
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
