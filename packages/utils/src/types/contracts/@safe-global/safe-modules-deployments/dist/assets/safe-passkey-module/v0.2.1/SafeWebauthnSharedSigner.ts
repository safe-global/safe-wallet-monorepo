/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export declare namespace SafeWebAuthnSharedSigner {
  export type SignerStruct = {
    x: BigNumberish;
    y: BigNumberish;
    verifiers: BigNumberish;
  };

  export type SignerStructOutput = [x: bigint, y: bigint, verifiers: bigint] & {
    x: bigint;
    y: bigint;
    verifiers: bigint;
  };
}

export interface SafeWebauthnSharedSignerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SIGNER_SLOT"
      | "configure"
      | "getConfiguration"
      | "isValidSignature(bytes32,bytes)"
      | "isValidSignature(bytes,bytes)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "SafeWebAuthnSharedSignerConfigured"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "SIGNER_SLOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "configure",
    values: [SafeWebAuthnSharedSigner.SignerStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getConfiguration",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignature(bytes,bytes)",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "SIGNER_SLOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "configure", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignature(bytes,bytes)",
    data: BytesLike
  ): Result;
}

export namespace SafeWebAuthnSharedSignerConfiguredEvent {
  export type InputTuple = [
    publicKeyHash: BytesLike,
    x: BigNumberish,
    y: BigNumberish,
    verifiers: BigNumberish
  ];
  export type OutputTuple = [
    publicKeyHash: string,
    x: bigint,
    y: bigint,
    verifiers: bigint
  ];
  export interface OutputObject {
    publicKeyHash: string;
    x: bigint;
    y: bigint;
    verifiers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SafeWebauthnSharedSigner extends BaseContract {
  connect(runner?: ContractRunner | null): SafeWebauthnSharedSigner;
  waitForDeployment(): Promise<this>;

  interface: SafeWebauthnSharedSignerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SIGNER_SLOT: TypedContractMethod<[], [bigint], "view">;

  configure: TypedContractMethod<
    [signer: SafeWebAuthnSharedSigner.SignerStruct],
    [void],
    "nonpayable"
  >;

  getConfiguration: TypedContractMethod<
    [account: AddressLike],
    [SafeWebAuthnSharedSigner.SignerStructOutput],
    "view"
  >;

  "isValidSignature(bytes32,bytes)": TypedContractMethod<
    [message: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  "isValidSignature(bytes,bytes)": TypedContractMethod<
    [data: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SIGNER_SLOT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "configure"
  ): TypedContractMethod<
    [signer: SafeWebAuthnSharedSigner.SignerStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getConfiguration"
  ): TypedContractMethod<
    [account: AddressLike],
    [SafeWebAuthnSharedSigner.SignerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature(bytes32,bytes)"
  ): TypedContractMethod<
    [message: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignature(bytes,bytes)"
  ): TypedContractMethod<
    [data: BytesLike, signature: BytesLike],
    [string],
    "view"
  >;

  getEvent(
    key: "SafeWebAuthnSharedSignerConfigured"
  ): TypedContractEvent<
    SafeWebAuthnSharedSignerConfiguredEvent.InputTuple,
    SafeWebAuthnSharedSignerConfiguredEvent.OutputTuple,
    SafeWebAuthnSharedSignerConfiguredEvent.OutputObject
  >;

  filters: {
    "SafeWebAuthnSharedSignerConfigured(bytes32,uint256,uint256,uint176)": TypedContractEvent<
      SafeWebAuthnSharedSignerConfiguredEvent.InputTuple,
      SafeWebAuthnSharedSignerConfiguredEvent.OutputTuple,
      SafeWebAuthnSharedSignerConfiguredEvent.OutputObject
    >;
    SafeWebAuthnSharedSignerConfigured: TypedContractEvent<
      SafeWebAuthnSharedSignerConfiguredEvent.InputTuple,
      SafeWebAuthnSharedSignerConfiguredEvent.OutputTuple,
      SafeWebAuthnSharedSignerConfiguredEvent.OutputObject
    >;
  };
}
