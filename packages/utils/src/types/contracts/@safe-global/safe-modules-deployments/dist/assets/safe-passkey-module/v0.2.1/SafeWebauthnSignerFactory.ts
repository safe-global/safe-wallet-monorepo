/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../../common";

export interface SafeWebauthnSignerFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "SINGLETON"
      | "createSigner"
      | "getSigner"
      | "isValidSignatureForSigner"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Created"): EventFragment;

  encodeFunctionData(functionFragment: "SINGLETON", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createSigner",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigner",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidSignatureForSigner",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "SINGLETON", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isValidSignatureForSigner",
    data: BytesLike
  ): Result;
}

export namespace CreatedEvent {
  export type InputTuple = [
    signer: AddressLike,
    x: BigNumberish,
    y: BigNumberish,
    verifiers: BigNumberish
  ];
  export type OutputTuple = [
    signer: string,
    x: bigint,
    y: bigint,
    verifiers: bigint
  ];
  export interface OutputObject {
    signer: string;
    x: bigint;
    y: bigint;
    verifiers: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SafeWebauthnSignerFactory extends BaseContract {
  connect(runner?: ContractRunner | null): SafeWebauthnSignerFactory;
  waitForDeployment(): Promise<this>;

  interface: SafeWebauthnSignerFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  SINGLETON: TypedContractMethod<[], [string], "view">;

  createSigner: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, verifiers: BigNumberish],
    [string],
    "nonpayable"
  >;

  getSigner: TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, verifiers: BigNumberish],
    [string],
    "view"
  >;

  isValidSignatureForSigner: TypedContractMethod<
    [
      message: BytesLike,
      signature: BytesLike,
      x: BigNumberish,
      y: BigNumberish,
      verifiers: BigNumberish
    ],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "SINGLETON"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createSigner"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, verifiers: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSigner"
  ): TypedContractMethod<
    [x: BigNumberish, y: BigNumberish, verifiers: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidSignatureForSigner"
  ): TypedContractMethod<
    [
      message: BytesLike,
      signature: BytesLike,
      x: BigNumberish,
      y: BigNumberish,
      verifiers: BigNumberish
    ],
    [string],
    "view"
  >;

  getEvent(
    key: "Created"
  ): TypedContractEvent<
    CreatedEvent.InputTuple,
    CreatedEvent.OutputTuple,
    CreatedEvent.OutputObject
  >;

  filters: {
    "Created(address,uint256,uint256,uint176)": TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;
    Created: TypedContractEvent<
      CreatedEvent.InputTuple,
      CreatedEvent.OutputTuple,
      CreatedEvent.OutputObject
    >;
  };
}
